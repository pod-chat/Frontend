{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/getNodeParentName.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/getFields.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/hasValidation.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    (props && props.control) || methods.control;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) => {\n        shouldRenderFormState(formState, readFormState.current) &&\n          updateFormState({\n            ...formStateRef.current,\n            ...formState,\n          });\n      },\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    controllerSubjectRef,\n    shouldUnmountUnregister,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value)\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n  });\n  get(fieldsRef.current, name)._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    (ref as (instance: any) => void)({\n      target: value,\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      (shouldUnmountUnregister || shouldUnregister) && unregister(name);\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef?: FieldValues,\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","export default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...(Array.isArray(value) ? value : [value])];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value]),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...(Array.isArray(value) ? value : [value]), ...data];\n}\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T) =>\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormInternalUnregister,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        ),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isValid = !!(isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean));\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (\n        !fieldArrayNamesRef.current.size ||\n        ![...fieldArrayNamesRef.current].find((fieldArrayName) =>\n          name.startsWith(fieldArrayName),\n        )\n      ) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          setFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        )\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregisterInternal: UseFormInternalUnregister<TFieldValues> = (\n    name,\n    options = {},\n    notify,\n  ) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        (!shouldUnregister || notify) &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        notify &&\n          watchSubjectRef.current.next({\n            name: inputName,\n          });\n      }\n    }\n\n    if (notify) {\n      formStateSubjectRef.current.next({\n        ...formStateRef.current,\n        ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n        ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n      });\n      !options.keepIsValid && updateIsValid();\n    }\n  };\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) =>\n    unregisterInternal(name, options, true);\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      hasValidation(options) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref\n                ? registerFieldRef(name, ref, options)\n                : (shouldUnregister || (options && options.shouldUnregister)) &&\n                  unregisterInternal(name),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let fieldValues = {\n        ...(shouldUnregister ? {} : defaultValuesRef.current),\n        ...getFieldsValues(fieldsRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions, values);\n    isMountedRef.current = false;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister: unregisterInternal,\n        shouldUnmountUnregister: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport isUndefined from './utils/isUndefined';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id'\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmountUnregister,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(\n      getFieldsValues(fieldsRef, defaultValuesRef.current),\n      name,\n      [],\n    );\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    (Array.isArray(index) ? index : [index]).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach(\n      (appendValueItem, valueIndex) =>\n        !isPrimitive(appendValueItem) &&\n        Object.entries(appendValueItem).forEach(([key, value]) => {\n          const inputName = `${parentName || name}.${\n            parentName ? valueIndex : index + valueIndex\n          }.${key}`;\n\n          Array.isArray(value)\n            ? registerFieldArray(value, valueIndex, inputName)\n            : set(fieldsRef.current, inputName, {\n                _f: {\n                  ref: {\n                    name: inputName,\n                  },\n                  name: inputName,\n                  value,\n                },\n              });\n        }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      value: get(\n        getFieldsValues(fieldsRef, defaultValuesRef.current),\n        name,\n        [],\n      ),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmountUnregister || shouldUnregister) && unregister(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\n\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[]\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, value }) =>\n        (!nameRef.current ||\n          !inputName ||\n          (Array.isArray(nameRef.current)\n            ? nameRef.current\n            : [nameRef.current]\n          ).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          isString(inputName) &&\n            nameRef.current === inputName &&\n            !isUndefined(value)\n            ? value\n            : watchInternal(\n                nameRef.current as string,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"names":["element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","current","isObject","Object","keys","length","isEmptyObject","find","window","HTMLElement","document","isWeb","useFormState","props","methods","formStateRef","formStateSubjectRef","control","updateFormState","useState","readFormState","useRef","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","subscribe","next","shouldRenderFormState","unsubscribe","getProxyFormState","useController","name","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","controllerSubjectRef","shouldUnmountUnregister","onChange","onBlur","ref","setInputStateValue","_f","controllerSubscription","data","values","target","field","event","isCheckBoxInput","checked","getControllerValue","elm","fieldState","defineProperties","invalid","isTouched","error","validateAllFieldCriteria","message","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","omit","focus","refs","getFieldsValues","output","disabled","every","substring","search","d","performance","now","c","r","Math","random","toString","keyName","map","generateId","deepEqual","object1","object2","isErrorObject","isPrimitive","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","slice","append","fill","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","validResult","options","option","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","required","min","max","maxLength","minLength","pattern","validate","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","validateFunction","entries","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","isWindowUndefined","render","Provider","children","focusNameRef","isWatchAllRef","watchFieldsRef","getIsDirty","watchSubjectRef","fieldArraySubjectRef","fieldArrayNamesRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","setFields","mapIds","getFieldArrayParentName","omitKey","getCurrentFieldsValues","getFocusDetail","focusIndex","focusName","shouldFocus","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","updateDirtyFieldsWithDefaultValues","registerFieldArray","forEach","appendValueItem","valueIndex","inputName","watchField","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","swap","useCallback","fieldValues","swapArrayAt","move","moveArrayAt","prependValue","prependAt","fillEmptyArray","appendValue","appendAt","currentIndex","remove","removeArrayAt","resetFields","insertValue","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","isMountedRef","contextRef","resolverRef","validationMode","getValidationModes","isValidateAllFieldCriteria","setFormState","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","isHTMLElement","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","names","currentNames","validateForm","fieldError","Promise","all","fieldName","setInternalValues","inputKey","isFieldWatched","has","updateValidAndValue","isWithinRefCallback","defaultChecked","size","fieldArrayName","hasValidation","then","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","getNodeParentName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","watchInternal","isGlobal","isArrayNames","unregisterInternal","notify","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","useFieldArraySubscription","useMemo","watch","info","setValue","isFieldArray","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","clearErrors","setError","setFocus","nameRef","updateValue","watchSubscription","some"],"mappings":"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"}